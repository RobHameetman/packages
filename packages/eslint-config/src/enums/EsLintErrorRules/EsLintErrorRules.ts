export enum EsLintErrorRules {
	ForDirection = 'for-direction',
	GetterReturn = 'getter-return',
	NoAsyncPromiseExecutor = 'no-async-promise-executor',
	NoAwaitInLoop = 'no-await-in-loop',
	NoCompareNegZero = 'no-compare-neg-zero',
	NoCondAssign = 'no-cond-assign',
	NoConsole = 'no-console',
	NoConstantCondition = 'no-constant-condition',
	NoControlRegex = 'no-control-regex',
	NoDebugger = 'no-debugger',
	NoDupeArgs = 'no-dupe-args',
	NoDupeElseIf = 'no-dupe-else-if',
	NoDupeKeys = 'no-dupe-keys',
	NoDuplicateCase = 'no-duplicate-case',
	NoEmpty = 'no-empty',
	NoEmptyCharacterClass = 'no-empty-character-class',
	NoExAssign = 'no-ex-assign',
	NoExtraBooleanCast = 'no-extra-boolean-cast',
	NoExtraParens = 'no-extra-parens',
	NoExtraSemi = 'no-extra-semi',
	NoFuncAssign = 'no-func-assign',
	NoImportAssign = 'no-import-assign',
	NoInnerDeclarations = 'no-inner-declarations',
	NoInvalidRegexp = 'no-invalid-regexp',
	NoIrregularWhitespace = 'no-irregular-whitespace',
	NoMisleadingCharacterClass = 'no-misleading-character-class',
	NoObjCalls = 'no-obj-calls',
	NoPrototypeBuitlins = 'no-prototype-builtins',
	NoRegexSpaces = 'no-regex-spaces',
	NoSetterReturn = 'no-setter-return',
	NoSparseArrrays = 'no-sparse-arrays',
	NoTemplateCurlyInString = 'no-template-curly-in-string',
	NoUnexpectedMultiline = 'no-unexpected-multiline',
	NoUnreachable = 'no-unreachable',
	NoUnsafeFinally = 'no-unsafe-finally',
	NoUselessBackreference = 'no-useless-backreference',
	RequireAtomicUpdates = 'require-atomic-updates',
	UseIsNaN = 'use-isnan',
	ValidTypeof = 'valid-typeof',
}

export type EsLintErrorRule = keyof typeof EsLintErrorRules;

export const isEsLintErrorRule = (value: unknown): value is EsLintErrorRule =>
	typeof value === 'string' && (Object.values(EsLintErrorRules) as Array<string>).includes(value);
